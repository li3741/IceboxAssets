using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Xamarin.Forms;

namespace IceboxAssets
{
    /**
     * 第一阶段：做出一个基本的页面，能看到大概的样子
     * 1，有四个页面，冰箱空间/一日三餐/购物清单/个人中心
     * 冰箱空间：列表列出冰箱存放的物品清单
     * 一日三餐：用日历控件显示用户的家庭菜品清单
     * 购物清单：列表列出家庭待购的物品列表清单，有购物车的功能（即购物时使用的购物清单）
     * 个人中心：个人用户的基本信息已经该app的一些系统设置
     * 
     * 2,冰箱空间，
     * 列表显示信息有
     * 大图标(按焦耳量来做图块由绿色到红色焦耳量递增，没有焦耳量的物品则用灰色显示)、
     * 名称（粗字体）
     * 日期(利用转换器显示对应的日期的文字说明)、
     * 短说明（用比名称小一号体字，浅灰色一些）、
     * 小图标(存入的用户的首个字母/汉字)、
     * 选中选项，出现取的按钮
     * 底部有四个自定义按钮，分别是保鲜食物小计，冰冻食物小计，其他物品小计，本用户存入小计【这些按钮按下有过滤的功能】，存入按钮
     * 
     * 3，一日三餐，顶部有个日历（可以设置月或者周），每餐就是一个竖着的长方形方块，
     * 每样菜按焦耳量（红到绿 焦耳量由高到低）来着色一个竖着的更小的长方形，
     * 然后跟着菜名，包含的信息有 用餐时间固定名称（早餐，辅餐，中餐，辅餐，晚餐，宵夜），
     * 餐列出的菜点击进去能看详细页面，页面可以把材料和做法列出来，统一量度
     * 最后有两个按钮，1，参加（已经参加的，还可以退吗？）。2，是煮
     * 
     * 餐：  用餐名称（固定名称，即早餐。。等）、用餐时间、餐含焦耳量、菜品列表（外键列表）、用餐人列表（当前用户是否已经参加了该次用餐）（外键列表）、
     * 菜品：菜品名称、菜品焦耳量、菜品描述、食材（物品）列表（外键列表）、步骤列表（序号、文字描述和图片的关联，可以有多张图片（外键列表））（外键列表）
     * 物品（IceboxItem）:
     * 
     * 4(分成个人清单和购物车)
     * 一个物品是一排，物品前有个小图标表明状态（我的物品，他人物品，准备购买物品，已经购买物品）
     * 5，个人中心，参考微信的我页面
     * 
     * 6，需要统一的日历控件
     * 
     * 
     * 
     * 第二阶段：绑定数据
     * 
     * 1，如何使用数据库，并实现随意切换数据库的设计模式 (未找到)
     * 
     * 2，设置数据结构 
     *   2.1、冰箱空间
     *     【冰箱物项：物品名称、物品分类、放入时间、保鲜日期、备注】
     *   2.2、一日三餐
     *     【菜单：菜名，菜焦耳量（由高到低，由红到绿）,食用时间（日期划分成六个时间段）,菜分类（纯肉、半荤、素菜、）】
     *     【菜原料：原料名称，原料分类（肉、蔬菜、瓜果、工业制品*包含饮料、酒水*、未分类*默认项*）】 **也是【冰箱物项】**
     *     【烹饪步骤：步骤顺序，步骤标记*起始（0）/步骤（n）/上桌（1）*，步骤说明，】
     *        *和需要的原料是一对多关联表，关联给 起始 标记。
     *        *步骤图片关联给 步骤n 一对多。
     *        
     *   2.3、购物清单
     *        【生活物品
     *   2.4、个人中心
     * 
     * 3,使用MVVC模式来绑定数据，（model类，用来传递数据，view类，界面交互，viewmodel类，包装数据，
     * 实现观察者模式，dataaccess类，实现数据访问类，工具类，实现一些字符的切割或者格式的转换）
     * 
     * 4，把数据连接上视图，用测试来添加测试数据
     * 
     * 5，实现图片资源，让视图原来应该有的图片的地方有图片
     * 
     * 6，实现各个模块的搜索功能，分页功能，交互功能
     * 
     * 第三阶段：使用网络数据（同步到onenote中去、或者自己做一个api，可以切换使用）
     * 
     * 1，能否多写一个类，直接替换数据库
     * 
     * 2，同步网络数据到本地数据库，实现离线也能操作，在线后，再同步的机制？
     * 
     * 第四阶段：优化使用体验，应该还有地方可以快速使用的。
     * 
     * 建立版本，推广使用？
     * 
     * 1，使用NFC功能，快速录入物品，电子标签
     * 2，扫描二维码，加入家庭
     * 
     **/



    public partial class MainPage : TabbedPage
    {
        public MainPage()
        {
            InitializeComponent();
        }
    }
}
